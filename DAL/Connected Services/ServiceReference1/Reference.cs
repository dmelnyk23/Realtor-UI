//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WCF.DataContracts")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] FavouriteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DAL.ServiceReference1.Lot[] LotsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Favourite {
            get {
                return this.FavouriteField;
            }
            set {
                if ((object.ReferenceEquals(this.FavouriteField, value) != true)) {
                    this.FavouriteField = value;
                    this.RaisePropertyChanged("Favourite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DAL.ServiceReference1.Lot[] Lots {
            get {
                return this.LotsField;
            }
            set {
                if ((object.ReferenceEquals(this.LotsField, value) != true)) {
                    this.LotsField = value;
                    this.RaisePropertyChanged("Lots");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lot", Namespace="http://schemas.datacontract.org/2004/07/WCF.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Lot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DAL.ServiceReference1.Address AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ApartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FlourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HouseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsForSaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReservedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DAL.ServiceReference1.Photo[] PhotosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoomsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SquareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DAL.ServiceReference1.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DAL.ServiceReference1.Address Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Apartment {
            get {
                return this.ApartmentField;
            }
            set {
                if ((this.ApartmentField.Equals(value) != true)) {
                    this.ApartmentField = value;
                    this.RaisePropertyChanged("Apartment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Flour {
            get {
                return this.FlourField;
            }
            set {
                if ((this.FlourField.Equals(value) != true)) {
                    this.FlourField = value;
                    this.RaisePropertyChanged("Flour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool House {
            get {
                return this.HouseField;
            }
            set {
                if ((this.HouseField.Equals(value) != true)) {
                    this.HouseField = value;
                    this.RaisePropertyChanged("House");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsForSale {
            get {
                return this.IsForSaleField;
            }
            set {
                if ((this.IsForSaleField.Equals(value) != true)) {
                    this.IsForSaleField = value;
                    this.RaisePropertyChanged("IsForSale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReserved {
            get {
                return this.IsReservedField;
            }
            set {
                if ((this.IsReservedField.Equals(value) != true)) {
                    this.IsReservedField = value;
                    this.RaisePropertyChanged("IsReserved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSold {
            get {
                return this.IsSoldField;
            }
            set {
                if ((this.IsSoldField.Equals(value) != true)) {
                    this.IsSoldField = value;
                    this.RaisePropertyChanged("IsSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DAL.ServiceReference1.Photo[] Photos {
            get {
                return this.PhotosField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotosField, value) != true)) {
                    this.PhotosField = value;
                    this.RaisePropertyChanged("Photos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoomsCount {
            get {
                return this.RoomsCountField;
            }
            set {
                if ((this.RoomsCountField.Equals(value) != true)) {
                    this.RoomsCountField = value;
                    this.RaisePropertyChanged("RoomsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Square {
            get {
                return this.SquareField;
            }
            set {
                if ((this.SquareField.Equals(value) != true)) {
                    this.SquareField = value;
                    this.RaisePropertyChanged("Square");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DAL.ServiceReference1.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="http://schemas.datacontract.org/2004/07/WCF.Models")]
    [System.SerializableAttribute()]
    public partial class Address : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DAL.ServiceReference1.Lot[] LotsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DAL.ServiceReference1.Lot[] Lots {
            get {
                return this.LotsField;
            }
            set {
                if ((object.ReferenceEquals(this.LotsField, value) != true)) {
                    this.LotsField = value;
                    this.RaisePropertyChanged("Lots");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/WCF.DataContracts")]
    [System.SerializableAttribute()]
    public partial class Photo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DAL.ServiceReference1.Lot LotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DAL.ServiceReference1.Lot Lot {
            get {
                return this.LotField;
            }
            set {
                if ((object.ReferenceEquals(this.LotField, value) != true)) {
                    this.LotField = value;
                    this.RaisePropertyChanged("Lot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMethods")]
    public interface IMethods {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/AddUser", ReplyAction="http://tempuri.org/IMethods/AddUserResponse")]
        void AddUser(DAL.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/AddUser", ReplyAction="http://tempuri.org/IMethods/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(DAL.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/ModifyUser", ReplyAction="http://tempuri.org/IMethods/ModifyUserResponse")]
        void ModifyUser(DAL.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/ModifyUser", ReplyAction="http://tempuri.org/IMethods/ModifyUserResponse")]
        System.Threading.Tasks.Task ModifyUserAsync(DAL.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/DeleteUser", ReplyAction="http://tempuri.org/IMethods/DeleteUserResponse")]
        void DeleteUser(DAL.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/DeleteUser", ReplyAction="http://tempuri.org/IMethods/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(DAL.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/GetUsers", ReplyAction="http://tempuri.org/IMethods/GetUsersResponse")]
        DAL.ServiceReference1.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/GetUsers", ReplyAction="http://tempuri.org/IMethods/GetUsersResponse")]
        System.Threading.Tasks.Task<DAL.ServiceReference1.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/GetLots", ReplyAction="http://tempuri.org/IMethods/GetLotsResponse")]
        DAL.ServiceReference1.Lot[] GetLots();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/GetLots", ReplyAction="http://tempuri.org/IMethods/GetLotsResponse")]
        System.Threading.Tasks.Task<DAL.ServiceReference1.Lot[]> GetLotsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/ReserveLot", ReplyAction="http://tempuri.org/IMethods/ReserveLotResponse")]
        void ReserveLot(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/ReserveLot", ReplyAction="http://tempuri.org/IMethods/ReserveLotResponse")]
        System.Threading.Tasks.Task ReserveLotAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/AddLot", ReplyAction="http://tempuri.org/IMethods/AddLotResponse")]
        void AddLot(DAL.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/AddLot", ReplyAction="http://tempuri.org/IMethods/AddLotResponse")]
        System.Threading.Tasks.Task AddLotAsync(DAL.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/LotEdit", ReplyAction="http://tempuri.org/IMethods/LotEditResponse")]
        void LotEdit(DAL.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/LotEdit", ReplyAction="http://tempuri.org/IMethods/LotEditResponse")]
        System.Threading.Tasks.Task LotEditAsync(DAL.ServiceReference1.Lot lot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/DeleteLot", ReplyAction="http://tempuri.org/IMethods/DeleteLotResponse")]
        void DeleteLot(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMethods/DeleteLot", ReplyAction="http://tempuri.org/IMethods/DeleteLotResponse")]
        System.Threading.Tasks.Task DeleteLotAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMethodsChannel : DAL.ServiceReference1.IMethods, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MethodsClient : System.ServiceModel.ClientBase<DAL.ServiceReference1.IMethods>, DAL.ServiceReference1.IMethods {
        
        public MethodsClient() {
        }
        
        public MethodsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MethodsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MethodsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MethodsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUser(DAL.ServiceReference1.User user) {
            base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(DAL.ServiceReference1.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public void ModifyUser(DAL.ServiceReference1.User user) {
            base.Channel.ModifyUser(user);
        }
        
        public System.Threading.Tasks.Task ModifyUserAsync(DAL.ServiceReference1.User user) {
            return base.Channel.ModifyUserAsync(user);
        }
        
        public void DeleteUser(DAL.ServiceReference1.User user) {
            base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(DAL.ServiceReference1.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public DAL.ServiceReference1.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<DAL.ServiceReference1.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public DAL.ServiceReference1.Lot[] GetLots() {
            return base.Channel.GetLots();
        }
        
        public System.Threading.Tasks.Task<DAL.ServiceReference1.Lot[]> GetLotsAsync() {
            return base.Channel.GetLotsAsync();
        }
        
        public void ReserveLot(int id) {
            base.Channel.ReserveLot(id);
        }
        
        public System.Threading.Tasks.Task ReserveLotAsync(int id) {
            return base.Channel.ReserveLotAsync(id);
        }
        
        public void AddLot(DAL.ServiceReference1.Lot lot) {
            base.Channel.AddLot(lot);
        }
        
        public System.Threading.Tasks.Task AddLotAsync(DAL.ServiceReference1.Lot lot) {
            return base.Channel.AddLotAsync(lot);
        }
        
        public void LotEdit(DAL.ServiceReference1.Lot lot) {
            base.Channel.LotEdit(lot);
        }
        
        public System.Threading.Tasks.Task LotEditAsync(DAL.ServiceReference1.Lot lot) {
            return base.Channel.LotEditAsync(lot);
        }
        
        public void DeleteLot(int id) {
            base.Channel.DeleteLot(id);
        }
        
        public System.Threading.Tasks.Task DeleteLotAsync(int id) {
            return base.Channel.DeleteLotAsync(id);
        }
    }
}
